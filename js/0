const inventory = {
  items: ['Knife', 'Gas mask'],
  add(itemName) {
    console.log(`Adding ${itemName} to inventory`);

    this.items.push(itemName);
  },
  remove(itemName) {
    console.log(`Removing ${itemName} from inventory`);

    this.items = this.items.filter(item => item !== itemName);
  },
};

const invokeInventoryAction = function(itemName, action) {
  console.log(`Invoking action on ${itemName}`);
  action(itemName);
};

invokeInventoryAction ('Medkit', inventory.add.bind(inventory));
// Invoking action on Medkit
// Adding Medkit to inventory

console.log(inventory.items); // ['Knife', 'Gas mask', 'Medkit']

invokeInventoryAction.bind(inventory)('Gas mask', inventory.remove.bind(inventory));
// Invoking action on Gas mask
// Removing Gas mask from inventory

console.log(inventory.items); // ['Knife', 'Medkit']




/*
const printMessage = function(message) {
  console.log(message);
};

const higherOrderFunction = function(callback) {
  const string = 'HOCs are awesome';
  callback(string);
};

higherOrderFunction(printMessage);


const repeatLog = function(n) {
  for (let i = 0; i < n; i += 1) {
    console.log(i);
  }
};

repeatLog(5);


const printValue = function(value) {
  console.log(value);
};

const prettyPrint = function(value) {
  console.log('Logging value: ', value);
};

const repeat = function(n, action) {
  for (let i = 0; i < n; i += 1) {
    action(i);
  }
};

// Передаем printValue как callback-функцию
repeat(3, printValue);
// 0
// 1
// 2

// Передаем prettyPrint как callback-функцию
repeat(3, prettyPrint);
// Logging value: 0
// Logging value: 1
// Logging value: 2


const repeat = function(n, action) {
  for (let i = 0; i < n; i += 1) {
    action(i);
  }
};

const labels = [];

repeat(5, value => {
  labels.push(`Label ${value + 1}`);
});

console.log(labels); // ["Label 1", "Label 2", "Label 3", "Label 4", "Label 5"]


const filter = function(array) {
  for (const element of array) {
  }
};


const filter = function(array, test) {
  for (const element of array) {
    test(element);
  }
};


const filter = function(array, test) {
  const filteredElements = [];

  for (const element of array) {
    test(element);
  }

  return filteredElements;
};


const filter = function(array, test) {
  const filteredElements = [];

  for (const element of array) {
    const passed = test(element);

    if (passed) {
      filteredElements.push(element);
    }
  }

  return filteredElements;
};


const filter = function(array, test) {
  const filteredElements = [];

  for (const element of array) {
    const passed = test(element);

    if (passed) {
      filteredElements.push(element);
    }
  }

  return filteredElements;
};

const fruits = [
  { name: 'apples', quantity: 200, isFresh: true },
  { name: 'grapes', quantity: 150, isFresh: false },
  { name: 'bananas', quantity: 100, isFresh: true },
];

const freshFruits = filter(fruits, fruit => fruit.isFresh);
console.log(freshFruits); // массив с объектами apples и bananas

const fruitsWithQuantity = filter(fruits, fruit => fruit.quantity >= 120);
console.log(fruitsWithAmount); // массив с объектами apples и grapes


/*
  Global env - создается при исполнении файла скрипта
    Record: {}
    Parent: null
*/

const x = 10;
/*
  Global env
    Record: {x: 10}
    Parent: null
*/

const y = 20;
/*
  Global env
    Record: {x: 10, y: 20}
    Parent: null
*/

/*
  Записывается в момент объявления функции
  [[Environment]] = Global env
*/
const foo = function(z) {
  /*
    Foo env - создается в момент вызова функции
      Record: {z: 30}
      Parent: Global env
  */

  const x = 100;
  /*
    Foo env - создается в момент вызова функции
      Record: {z: 30, x: 100}
      Parent: Global env
  */

  return x + y + z;
};

/*
  Global env
    Record: {x: 10, y: 20, foo: <function>}
    Parent: null
*/

foo(30); // 150


const createCounter = function() {
    /*
     * Локальная переменная privateValue доступна только в замыкании.
     * Получить к ней доступ во внешнем коде невозможно.
     */
    let privateValue = 0;
  
    const increment = function() {
      privateValue += 1;
      console.log(privateValue);
    };
  
    return {
      increment,
    };
  };
  
  const counterA = createCounter();
  counterA.increment(); // 1
  counterA.increment(); // 2
  
  const counterB = createCounter();
  counterB.increment(); // 1
  counterB.increment(); // 2
  counterB.increment(); // 3
  